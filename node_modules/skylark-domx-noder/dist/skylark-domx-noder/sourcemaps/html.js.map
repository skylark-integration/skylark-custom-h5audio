{"version":3,"sources":["html.js"],"names":["define","types","scripter","noder","empty","rxhtmlTag","rscriptType","html","node","value","result","undefined","innerHTML","isString","replace","isNumber","isArrayLike","i","length","appendChild","this","_html","scripts","querySelectorAll","node1","test","type","evaluate","textContent"],"mappings":";;;;;;;AAAAA,QACI,sBACA,yBACH,UACG,WACF,SAASC,EAAMC,EAASC,EAAMC,GAE7B,IAAIC,EAAY,0EACZC,EAAc,qCAkDpB,OAAOH,EAAMI,KAnBV,SAAcC,EAAKC,GACf,IAAIC,EAzBR,SAAeF,EAAMD,GACjB,QAAaI,IAATJ,EACA,OAAOC,EAAKI,UAOZ,GALAR,EAAMI,GACND,EAAOA,GAAQ,GACXN,EAAMY,SAASN,KACfA,EAAOA,EAAKO,QAAST,EAAW,cAEhCJ,EAAMY,SAASN,IAASN,EAAMc,SAASR,GACvCC,EAAKI,UAAYL,OACd,GAAIN,EAAMe,YAAYT,GACzB,IAAK,IAAIU,EAAI,EAAGA,EAAIV,EAAKW,OAAQD,IAC7BT,EAAKW,YAAYZ,EAAKU,SAG1BT,EAAKW,YAAYZ,GAGrB,OAAOa,KAMEC,CAAMb,EAAKC,GAExB,QAAcE,IAAVF,EAAqB,CAGrB,IAFA,IAAIa,EAAUd,EAAKe,iBAAiB,UAE3BN,EAAG,EAAGA,EAAEK,EAAQJ,OAAQD,IAAK,CAClC,IAAIO,EAAQF,EAAQL,GAChBX,EAAYmB,KAAMD,EAAME,MAAQ,KAClCxB,EAASyB,SAASH,EAAMI,YAAYJ,GAG1C,OAAOJ,KAEP,OAAOV","file":"../html.js","sourcesContent":["define([\r\n    \"skylark-langx-types\",\r\n    \"skylark-langx-scripter\",\r\n\t\"./noder\",\r\n    \"./empty\"\r\n],function(types,scripter,noder,empty){\r\n \r\n   var rxhtmlTag = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\\w:]+)[^>]*)\\/>/gi,\r\n       rscriptType = ( /^$|^module$|\\/(?:java|ecma)script/i );\r\n\r\n    /*   \r\n     * Get the HTML contents of the first element in the set of matched elements.\r\n     * @param {HTMLElement} node\r\n     * @param {String} html\r\n     */\r\n    function _html(node, html) {\r\n        if (html === undefined) {\r\n            return node.innerHTML;\r\n        } else {\r\n            empty(node);\r\n            html = html || \"\";\r\n            if (types.isString(html)) {\r\n                html = html.replace( rxhtmlTag, \"<$1></$2>\" );\r\n            }\r\n            if (types.isString(html) || types.isNumber(html)) {               \r\n                node.innerHTML = html;\r\n            } else if (types.isArrayLike(html)) {\r\n                for (var i = 0; i < html.length; i++) {\r\n                    node.appendChild(html[i]);\r\n                }\r\n            } else {\r\n                node.appendChild(html);\r\n            }\r\n\r\n            return this;\r\n        }\r\n    }\r\n\r\n\r\n    function html(node,value) {\r\n        var result = _html(node,value);\r\n\r\n        if (value !== undefined) {\r\n            var scripts = node.querySelectorAll('script');\r\n\r\n            for (var i =0; i<scripts.length; i++) {\r\n                var node1 = scripts[i];\r\n                if (rscriptType.test( node1.type || \"\" ) ) {\r\n                  scripter.evaluate(node1.textContent,node1);\r\n                }\r\n            }       \r\n            return this;         \r\n        } else {\r\n            return result;\r\n        }\r\n    }\r\n\r\n\r\n\treturn noder.html = html;\r\n});"]}